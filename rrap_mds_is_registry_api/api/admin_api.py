"""
    FastAPI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.1.0
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from rrap_mds_is_registry_api.api_client import ApiClient, Endpoint as _Endpoint
from rrap_mds_is_registry_api.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from rrap_mds_is_registry_api.model.http_validation_error import HTTPValidationError
from rrap_mds_is_registry_api.model.registry_export_response import RegistryExportResponse
from rrap_mds_is_registry_api.model.registry_import_request import RegistryImportRequest
from rrap_mds_is_registry_api.model.registry_import_response import RegistryImportResponse
from rrap_mds_is_registry_api.model.registry_restore_request import RegistryRestoreRequest


class AdminApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client
        self.registry_admin_export_endpoint = _Endpoint(
            settings={
                'response_type': (RegistryExportResponse,),
                'auth': [
                    'OAuth2PasswordBearer'
                ],
                'endpoint_path': '/admin/export',
                'operation_id': 'registry_admin_export',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                },
                'attribute_map': {
                },
                'location_map': {
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.registry_admin_import_endpoint = _Endpoint(
            settings={
                'response_type': (RegistryImportResponse,),
                'auth': [
                    'OAuth2PasswordBearer'
                ],
                'endpoint_path': '/admin/import',
                'operation_id': 'registry_admin_import',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'registry_import_request',
                ],
                'required': [
                    'registry_import_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'registry_import_request':
                        (RegistryImportRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'registry_import_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.registry_admin_restore_endpoint = _Endpoint(
            settings={
                'response_type': (RegistryImportResponse,),
                'auth': [
                    'OAuth2PasswordBearer'
                ],
                'endpoint_path': '/admin/restore_from_table',
                'operation_id': 'registry_admin_restore',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'table_name',
                    'registry_restore_request',
                ],
                'required': [
                    'table_name',
                    'registry_restore_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'table_name':
                        (str,),
                    'registry_restore_request':
                        (RegistryRestoreRequest,),
                },
                'attribute_map': {
                    'table_name': 'table_name',
                },
                'location_map': {
                    'table_name': 'query',
                    'registry_restore_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )

    def registry_admin_export(
        self,
        **kwargs
    ):
        """Export Items  # noqa: E501

        Provides a mechanism for admins to dump the current contents of the registry table without any validation/parsing.  Parameters ----------  Returns ------- RegistryExportResponse     A status response including items in the payload.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.registry_admin_export(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            RegistryExportResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        return self.registry_admin_export_endpoint.call_with_http_info(**kwargs)

    def registry_admin_import(
        self,
        registry_import_request,
        **kwargs
    ):
        """Import Items Parsed  # noqa: E501

        This admin only endpoint enables rapid restoration of items in into the registry table.   The import mode describes what kind of rules you want to apply about items.   The import_request contains the import mode, and other settings described below.  Import mode -   ADD ONLY - will only add items - all items must be new and not exist in current registry.  ADD_OR_OVERWRITE - will only add or overwrite existing items. This form of import will always validate as any items are valid.  OVERWRITE_ONLY - all items must already exist in the registry, update will be applied with the new contents.  SYNC_ADD_OR_OVERWRITE - sync mode is the same as ADD OR OVERRIDE but also enforces that there are no items in the current table which are not in the import items payload. If there are such items, this validation will fail - consider using the item below.  SYNC_DELETION_ALLOWED - this will perform whatever is necessary to make the current registry table be identical to the provided items, including potentially deleting existing entries. USE WITH CAUTION. You must specify allow_entry_deletion explicitly to enable deletion.  Parse items - this flag forces all items in the item payload to be parsed as their respective models. For example, if the list includes an item with a category/subtype but a body which doesn't parse as that type, then the import will fail.  Allow entry deletion - this flag is only for use in the sync deletion allowed mode, and is a secondary defense against accidental deletion. Set to TRUE to enable deletion.  Trial mode - this is a flag which determines whether a trial mode is being run. Trial mode will perform the entire process with the exception of actually writing any changes. True = trial mode. False = write changes. Default = True.  Parameters ---------- import_request : RegistryImportRequest     The import request payload, as described above.  Returns ------- RegistryImportResponse     Returns an import response which includes status + statistics.  Raises ------ http_exception     Handled exception within import logic  HTTPException     500 error if something else goes wrong  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.registry_admin_import(registry_import_request, async_req=True)
        >>> result = thread.get()

        Args:
            registry_import_request (RegistryImportRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            RegistryImportResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['registry_import_request'] = \
            registry_import_request
        return self.registry_admin_import_endpoint.call_with_http_info(**kwargs)

    def registry_admin_restore(
        self,
        table_name,
        registry_restore_request,
        **kwargs
    ):
        """Restore From Table Parsed  # noqa: E501

        Provides an admin only mechanism for restoring the entire contents of the table from another dynamoDB table.  NOTE the admin runtime must have AWS permissions to read from the table. If you are running the API locally then it is likely your local runtime will have these permissions if you are signed into AWS. However, if you are running this against a live API, you may need to update the CDK deployment to have read only permissions into the specified table.  This is achieved by dumping the contents of the external table, then using the contents in the item payload to the import operation. The options provided in the import request here are propagated into the import request.  For more information about the import options, see the /import endpoint.  Parameters ---------- import_request : RegistryRestoreRequest     The import request settings - these will be used when propagating the     items from the external table. table_name : str     The name of the external table  Returns ------- RegistryImportResponse     Returns information about the import, including status and statistics.  Raises ------ http_exception     If a handled error occurs during the import operation, will raise it HTTPException     Otherwise a 500 error is returned with error details  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.registry_admin_restore(table_name, registry_restore_request, async_req=True)
        >>> result = thread.get()

        Args:
            table_name (str):
            registry_restore_request (RegistryRestoreRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            RegistryImportResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['table_name'] = \
            table_name
        kwargs['registry_restore_request'] = \
            registry_restore_request
        return self.registry_admin_restore_endpoint.call_with_http_info(**kwargs)

